#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('albumserver:server');
var http = require('http');
 var express = require('express') , expressWebSocket = require('express-ws')
, ffmpeg = require('fluent-ffmpeg'), WebSocket = require('websocket-stream'),webSocketStream= require('websocket-stream');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

 

function localServer() {
  let app = express();
  app.use(express.static(__dirname));
  expressWebSocket(app, null, {
      perMessageDeflate: true
  });
  app.ws("/rtsp/:id/", rtspRequestHandle)
  app.listen(8888);
  console.log("express listened")
}

function rtspRequestHandle(ws, req) {
  console.log("rtsp request handle");
  const stream = webSocketStream(ws, {
      binary: true,
      browserBufferTimeout: 1000000
  }, {
      browserBufferTimeout: 1000000
  });
  let url = req.query.url;
  console.log("rtsp url:", url);
  console.log("rtsp params:", req.params);
  try {
      ffmpeg(url)
          .addInputOption("-rtsp_transport", "tcp", "-buffer_size", "10240","-analyzeduration","0","-max_delay", "0")  // 这里可以添加一些 RTSP 优化的参数
          .on("start", function () {
              console.log(url, "Stream started.");
          })
          .on("codecData", function () {
              console.log(url, "Stream codecData.")
              // 摄像机在线处理
          })
          .on("error", function (err) {
              console.log(url, "An error occured: ", err.message);
          })
          .on("end", function () {
              console.log(url, "Stream end!");
              // 摄像机断线的处理
          })
          .outputFormat("flv").videoCodec("copy").noAudio().pipe(stream);
  } catch (error) {
      console.log(error);
  }
}

localServer();